{"version":3,"sources":["Header.js","firebase.js","Spinner.js","FirebaseComponent.js","Main.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Spinner","className","Firebase","displayLyrics","state","storedFirebaseData","database","ref","on","response","data","val","key","push","artistSongLyrics","setState","this","map","index","onClick","artist","toUpperCase","song","Component","Main","artistInput","e","firebaseData","target","value","songInput","getLyrics","preventDefault","isLoading","Axios","get","then","console","log","lyrics","splitLyrics","replace","split","updatedLyrics","event","test","userGuess","wordToGuess","onSubmit","action","htmlFor","type","id","onChange","src","alt","word","hide","i","length","alert","Footer","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1a95ff0e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <>\r\n      <header>\r\n        {/*  */}\r\n      </header>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Header;","import firebase from 'firebase/app';    //firebase\r\nimport 'firebase/database';             //firebase database\r\n\r\n  // Your web app's Firebase configuration\r\n  const firebaseConfig = {\r\n    apiKey: \"AIzaSyA3-ydP6B_gCEZnb3Qhw_bO8Rb58aMUutA\",\r\n    authDomain: \"savethelyric.firebaseapp.com\",\r\n    databaseURL: \"https://savethelyric.firebaseio.com\",\r\n    projectId: \"savethelyric\",\r\n    storageBucket: \"savethelyric.appspot.com\",\r\n    messagingSenderId: \"90336307330\",\r\n    appId: \"1:90336307330:web:40ef96b904978aafcbec9b\"\r\n  };\r\n\r\n  // Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React from 'react';\r\n\r\nfunction Spinner() {\r\n    return (\r\n        <div className=\"spinner\"></div>\r\n        \r\n    );\r\n}\r\nexport default Spinner;","import React, { Component } from \"react\";\r\nimport firebase from './firebase'; \r\n\r\nclass Firebase extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            storedFirebaseData: [],\r\n        }\r\n    } \r\n\r\n    componentDidMount() {\r\n        // create a Firebase reference\r\n        const dbRef = firebase.database().ref();\r\n        // listen to the value change and use `response` as the db value\r\n        dbRef.on('value', (response) => {\r\n          // clean up data from Firebase and store in state\r\n            const storedFirebaseData = [];\r\n            const data = response.val();\r\n    \r\n            for(let key in data) {\r\n                storedFirebaseData.push({\r\n                    key: key, \r\n                    artistSongLyrics: data[key]\r\n                });  \r\n\r\n            }\r\n            // console.log(storedFirebaseData)\r\n            this.setState({\r\n                storedFirebaseData\r\n            });\r\n        \r\n        });\r\n    }\r\n\r\n    displayLyrics = () => {\r\n        // add modal functions eres to display modal of artist song lyrics\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.storedFirebaseData.map((data, index) => {\r\n                    // {console.log(data)}\r\n                    return (\r\n                        <div className=\"allSavedSongs\">\r\n                          <div className=\"savedSongs\" key={index}>\r\n                              <button onClick={this.displayLyrics}>{data.artistSongLyrics.artist.toUpperCase()} - {data.artistSongLyrics.song.toUpperCase()}</button>\r\n\r\n                              <button className=\"\"></button>\r\n                          </div>\r\n\r\n                            {/* <p>{data.artistSongLyrics.lyrics}</p> */}\r\n                        </div>\r\n                    )\r\n                })}\r\n            </>\r\n        );\r\n    }  \r\n}\r\n\r\nexport default Firebase;","import React, { Component } from \"react\";\r\nimport Axios from \"axios\";\r\nimport firebase from './firebase';  \r\nimport Spinner from './Spinner';\r\nimport Firebase from './FirebaseComponent'\r\nclass Main extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      firebaseData: {\r\n        artist: \"\",\r\n        song: \"\",\r\n        lyrics: \"\",\r\n      },\r\n      isLoading: false,\r\n      splitLyrics: [],\r\n\r\n      userGuess: '',\r\n      wordToGuess: ''\r\n    }\r\n    // console.log(this.state.hideIndex);\r\n  }\r\n\r\n  //Functions\r\n  artistInput = (e) => {\r\n    this.setState({\r\n      firebaseData: {\r\n        artist: e.target.value,\r\n        song: this.state.firebaseData.song,\r\n      }\r\n    })\r\n  }\r\n  songInput = (e)=> {\r\n    this.setState({\r\n      firebaseData: {\r\n        song: e.target.value,\r\n        artist: this.state.firebaseData.artist,\r\n      }\r\n    })\r\n  }\r\n  getLyrics = (e) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      isLoading: true\r\n    });\r\n    Axios.get(`https://api.lyrics.ovh/v1/${this.state.firebaseData.artist}/${this.state.firebaseData.song}`)\r\n    .then((response) => {\r\n\r\n      console.log(response)\r\n\r\n      \r\n\r\n      const lyrics = response.data.lyrics\r\n      const splitLyrics = lyrics.replace(/\\n/g, \"\").replace(/\\r/g, \"\").split(\" \")\r\n      console.log(splitLyrics)\r\n      this.setState({\r\n        firebaseData: {\r\n          artist: this.state.firebaseData.artist,\r\n          song: this.state.firebaseData.song,\r\n          lyrics\r\n        },\r\n        isLoading: false,\r\n        splitLyrics: splitLyrics,\r\n      });\r\n    })\r\n  }\r\nupdatedLyrics = () => {\r\n// reset input field\r\n  this.setState({\r\n    firebaseData: {\r\n      artist: \"\",\r\n      song: \"\",\r\n      lyrics: \"\"\r\n    }  \r\n  })\r\n}\r\n\r\n  // Store firebaseData: (artist, song, lyrics) to firebase\r\n  firebase = (event) => {\r\n    event.preventDefault();\r\n    // open portal to Firebase\r\n    const dbRef = firebase.database().ref()\r\n    // add new record to Firebase\r\n    dbRef.push(this.state.firebaseData);\r\n    // reset input field\r\n    this.setState({\r\n      firebaseData: {\r\n        artist: \"\",\r\n        song: \"\",\r\n        lyrics: \"\"\r\n      },\r\n      isLoading: false,\r\n    });\r\n  }\r\n  test = (e) => {\r\n    this.setState({\r\n      userGuess: e.target.value\r\n    })\r\n  }\r\n  // testTwo = (e) => {\r\n  //   this.setState({\r\n  //     wordToGuess: \r\n  //   })\r\n  // }\r\n  render(){\r\n    return(\r\n      <main>\r\n        <div className=\"wrapper mainContainer\">\r\n        {/* Left */}\r\n          <section className=\"left\">\r\n            <div className=\"findLyrics\">\r\n              <h3>Test your knowledge!</h3>\r\n              <form onSubmit={this.getLyrics} action=\"\">\r\n                <div className=\"song\">\r\n                  <label htmlFor=\"song\">Song:</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"song\"\r\n                    className=\"song\"\r\n                    onChange={this.songInput}\r\n                    value={this.state.firebaseData.song}\r\n                  />\r\n                </div>\r\n                <div className=\"artist\">\r\n                <label htmlFor=\"artist\">Artist:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"artist\"\r\n                  className=\"artist\"\r\n                  onChange={this.artistInput}\r\n                  value={this.state.firebaseData.artist}\r\n                />\r\n                </div>\r\n                <div className=\"buttonContainer\">\r\n                  <button type=\"submit\">Find the lyric</button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n            <div className=\"myLyrics\">\r\n              <div className=\"logoContainer\">\r\n                <img src=\"./assets/myLyricsButton.jpg\" alt=\"\"></img>\r\n              </div>\r\n              <h3>My Lyrics</h3>\r\n              {/* THIS IS WHERE THE FIREBASE COMPONENT IS DISPLAYED */}\r\n              <Firebase />\r\n            </div>\r\n          </section>\r\n          {/* Right */}\r\n          <section className=\"right\">\r\n            <div className=\"lyrics\">\r\n              {this.state.isLoading ? \r\n                    (\r\n                      <div className=\"artSpinnerBox\">\r\n                        <Spinner />\r\n                      </div>\r\n                    ) \r\n                    : \r\n                      //Maps over the split lyrics array and either creates an input or returns the word in the array\r\n                      //to figure out:\r\n                      //how to compare the index to multiple hideIndex\r\n                      //how to compare the users input word with the missing lyric\r\n                      this.state.splitLyrics.map((word, index) => {\r\n                        // console.log(index)\r\n                        const hide = this.state.splitLyrics;\r\n                        // let i = '';\r\n                        for (let i = 10; i < hide.length; i+=32) {\r\n                          if ( index === i ) {\r\n\r\n                            return (<input word={word} onChange={this.test}/>)\r\n                          }\r\n                          if (this.state.userGuess === word) {\r\n                            alert('fuckya');\r\n                            console.log(word)\r\n                            return \r\n\r\n                            console.log(word)\r\n                          \r\n                            return (<input />)\r\n\r\n                          }\r\n                        }\r\n                        return word + \" \"\r\n                        // <p>word</p>\r\n                      })\r\n                  }\r\n            </div>\r\n                <div className=\"buttonContainer\">\r\n                  <button className=\"saveLyrics\">\r\n                    Store lyrics\r\n                  </button>\r\n                </div>\r\n          </section>\r\n        </div>\r\n      </main>\r\n    )\r\n  }\r\n}\r\nexport default Main;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <>\r\n        <footer>\r\n            <p>Copyright © 2020  | <a href=\"https://junocollege.com/\" target=\"blank\">Created at Juno College</a></p>\r\n        </footer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\n// import Firebase from './FirebaseComponent'\r\nimport './App.css';\r\n\r\nimport Header from './Header.js';\r\nimport Main from \"./Main.js\"\r\nimport Footer from \"./Footer\"\r\n\r\n// import Spinner from 'Spinner';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      \r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Header />\r\n        <Main />\r\n        <Footer />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}